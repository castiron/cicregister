plugin.tx_cicregister {
	vendorName = CIC
	view {
		templateRootPaths {
			10 = {$plugin.tx_cicregister.view.templateRootPath}
		}
		partialRootPaths {
			10 = {$plugin.tx_cicregister.view.partialRootPath}
		}
		layoutRootPaths {
			10 = {$plugin.tx_cicregister.view.layoutRootPath}
		}
	}
	settings {
		views {
			new {
				disableAjax = 0
				formTargetPid = {$plugin.tx_cicregister.settings.pids.newView}
			}
		}
		defaults {
			globalGroupId = {$plugin.tx_cicregister.settings.uids.globalGroupId}
		}
		pids {
			editView = {$plugin.tx_cicregister.settings.pids.editView}
			loginView = {$plugin.tx_cicregister.settings.pids.loginView}
			newView = {$plugin.tx_cicregister.settings.pids.newView}
		}
		login {
			returnMessages {
				1 = This is a sample redirect message. Reference the key in the &return_msg GET/POST variable.
			}
			allowForgotPassword = 1
			honorRedirectUrlArgument = 1
			postLoginRedirectPid = {$plugin.tx_cicregister.settings.pids.logoutView}
			allowedRedirectSourceDomains =
		}
		behaviors {
			login {
				forgotPassword {
					CIC\Cicregister\Behaviors\SendForgotPasswordEmail = 1
					CIC\Cicregister\Behaviors\SendForgotPasswordEmail {
						senderEmail = {$plugin.tx_cicregister.settings.email.senderEmail}
						senderName = {$plugin.tx_cicregister.settings.email.senderName}
						validateSubject = {$plugin.tx_cicregister.settings.email.subjects.forgotPassword}
						variables {
							siteName = {$plugin.tx_cicregister.settings.strings.siteName}
							validatePid = {$plugin.tx_cicregister.settings.pids.editView}
						}
					}
				}
			}
			frontendUser {
				validationEmailSend {
					CIC\Cicregister\Behaviors\SendValidationEmail = 1
					CIC\Cicregister\Behaviors\SendValidationEmail {
						senderEmail = {$plugin.tx_cicregister.settings.email.senderEmail}
						senderName = {$plugin.tx_cicregister.settings.email.senderName}
						validateSubject = {$plugin.tx_cicregister.settings.email.subjects.validateAccount}
						variables {
							message = {$plugin.tx_cicregister.settings.email.validationEmailSend.message}
							siteName = {$plugin.tx_cicregister.settings.strings.siteName}
							validatePid = {$plugin.tx_cicregister.settings.pids.editView}
						}
					}
				}
				emailValidationSuccess {
					CIC\Cicregister\Behaviors\SyncToSalesforce = 0
				}
				emailValidationFailure {
				}
				updated {
					CIC\Cicregister\Behaviors\SyncToSalesforce = 0
				}
				created {
					CIC\Cicregister\Behaviors\SendValidationEmail = 1
					CIC\Cicregister\Behaviors\SendValidationEmail {
						senderEmail = {$plugin.tx_cicregister.settings.email.senderEmail}
						senderName = {$plugin.tx_cicregister.settings.email.senderName}
						validateSubject = {$plugin.tx_cicregister.settings.email.subjects.validateAccount}
						variables {
							message = {$plugin.tx_cicregister.settings.email.create.message}
							siteName = {$plugin.tx_cicregister.settings.strings.siteName}
							validatePid = {$plugin.tx_cicregister.settings.pids.editView}
						}
					}
					CIC\Cicregister\Behaviors\AddFlashMessage = 0
					CIC\Cicregister\Behaviors\AddFlashMessage {
						severity =
						title = Sign-up Successful!
						message = Thank you for signing up with {$plugin.tx_cicregister.settings.strings.siteName}
					}
					CIC\Cicregister\Behaviors\AuthenticateUser = 1
					CIC\Cicregister\Behaviors\AuthenticateUser {
						forwardAction =
						forwardPid = {$plugin.tx_cicregister.settings.pids.logoutView}
						feuserPid =  {$plugin.tx_cicregister.settings.pids.storagePid}
					}
				}
			}
		}
		decorators {
			frontendUser {
				created {
					CIC\Cicregister\Decorators\Disable = 0
					CIC\Cicregister\Decorators\AddToGroup = 1
					CIC\Cicregister\Decorators\AddToGroup {
						groupUid = {$plugin.tx_cicregister.settings.uids.unvalidatedGroupId}
					}
				}
				emailValidated {
					CIC\Cicregister\Decorators\Enable = 1
					CIC\Cicregister\Decorators\AddToGroup {
						groupUid = {$plugin.tx_cicregister.settings.uids.validatedGroupId}
					}
					CIC\Cicregister\Decorators\RemoveFromGroup = 1
					CIC\Cicregister\Decorators\RemoveFromGroup {
						groupUid = {$plugin.tx_cicregister.settings.uids.unvalidatedGroupId}
					}
				}
				edited {
				}
			}
		}
	}
	persistence {
		storagePid = {$plugin.tx_cicregister.settings.pids.storagePid}
	}
	features {
		rewrittenPropertyMapper = 1
		requireCHashArgumentForActionArguments = 0
	}
}

config.tx_extbase {
	objects {
		TYPO3\CMS\Extbase\Domain\Repository\FrontendUserRepository {
			className = CIC\Cicregister\Domain\Repository\GlobalFrontendUserRepository
		}
	}
	persistence {
		classes {
			TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup {
				mapping {
					tableName = fe_groups
					recordType = TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup
				}
				subclasses {
					CIC\Cicregister\Domain\Model\FrontendUserGroup = CIC\Cicregister\Domain\Model\FrontendUserGroup
				}
			}
			TYPO3\CMS\Extbase\Domain\Model\FrontendUser {
				mapping {
					tableName = fe_users
					recordType = TYPO3\CMS\Extbase\Domain\Model\FrontendUser
					columns {
						lockToDomain.mapOnProperty = lockToDomain
					}
				}
				subclasses {
					CIC\Cicregister\Domain\Model\FrontendUser = CIC\Cicregister\Domain\Model\FrontendUser
				}
			}
			CIC\Cicregister\Domain\Model\FrontendUserGroup {
				mapping {
					tableName = fe_groups
					recordType = CIC\Cicregister\Domain\Model\FrontendUserGroup
					columns {
						tx_cicregister_enrollment_code.mapOnProperty = enrollmentCode
						felogin_redirectPid.mapOnProperty = redirectPid
					}
				}
			}
			CIC\Cicregister\Domain\Model\FrontendUser {
				mapping {
					tableName = fe_users
					recordType = CIC\Cicregister\Domain\Model\FrontendUser
					columns {
						tx_cicregister_sfdc_contact_id.mapOnProperty = sfdcContactID
						tx_cicregister_sfdc_lead_id.mapOnProperty = sfdcLeadID
						tx_cicregister_sfdc_sync_timestamp.mapOnProperty = sfdcSyncTimestamp
						tx_cicregister_state.mapOnProperty = state
						felogin_redirectPid.mapOnProperty = redirectPid
					}
				}
			}

			CIC\Cicregister\Domain\Model\Invitation {
				mapping {
					columns {
						tstamp.mapOnProperty = lastModified
					}
				}
			}
		}
	}
}

Tx_Cicregister_JSON_RequestPage = PAGE
Tx_Cicregister_JSON_RequestPage {
    typeNum = {$plugin.tx_cicregister.settings.eidTypeNum}
    config {
        disableAllHeaderCode = 1
        xhtml_cleaning = 0
        admPanel = 0
            debug = 0
            no_cache = 1
        additionalHeaders = Content-type:application/json
    }
	10 = USER_INT
	10 {
		userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
		extensionName = Cicregister
		vendorName = CIC
		pluginName = Create
		switchableControllerActions {
			FrontendUserJSON {
				1 = create
				2 = createConfirmationMustValidate
			}
		}
	}
}

config {
	# The validation email links to the edit profile page, which is often set so that it is
	# only visible to a logged in user. This rather obscure Typoscript property makes it
	# possible for Extbase to link to an access restricted page. Moreover, we tend to think
	# that this is a good site-wide default. Why would you want to show an anonymous user
	# text that wasn't linked? Better not to show the content element at all, but to let it
	# renderd the same accross contexts.
	typolinkLinkAccessRestrictedPages = NONE
}